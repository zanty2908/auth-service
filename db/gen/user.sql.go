// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: user.sql

package db

import (
	"context"
)

const countUsers = `-- name: CountUsers :one
SELECT COUNT(*) FROM users
`

func (q *Queries) CountUsers(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countUsers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    id, full_name, email, phone, country, password, aud, role
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
)
RETURNING id, created_at, updated_at, deleted_at, full_name, phone, country, email, password, last_sign, role, aud
`

type CreateUserParams struct {
	ID       string  `json:"id"`
	FullName string  `json:"fullName"`
	Email    *string `json:"email"`
	Phone    string  `json:"phone"`
	Country  string  `json:"country"`
	Password *string `json:"password"`
	Aud      string  `json:"aud"`
	Role     string  `json:"role"`
}

func (q *Queries) CreateUser(ctx context.Context, arg *CreateUserParams) (*User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.FullName,
		arg.Email,
		arg.Phone,
		arg.Country,
		arg.Password,
		arg.Aud,
		arg.Role,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.FullName,
		&i.Phone,
		&i.Country,
		&i.Email,
		&i.Password,
		&i.LastSign,
		&i.Role,
		&i.Aud,
	)
	return &i, err
}

const getUser = `-- name: GetUser :one
SELECT id, created_at, updated_at, deleted_at, full_name, phone, country, email, password, last_sign, role, aud FROM users
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetUser(ctx context.Context, id string) (*User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.FullName,
		&i.Phone,
		&i.Country,
		&i.Email,
		&i.Password,
		&i.LastSign,
		&i.Role,
		&i.Aud,
	)
	return &i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, created_at, updated_at, deleted_at, full_name, phone, country, email, password, last_sign, role, aud FROM users
WHERE email = $1 AND aud = $2 LIMIT 1
FOR NO KEY UPDATE
`

type GetUserByEmailParams struct {
	Email *string `json:"email"`
	Aud   string  `json:"aud"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, arg *GetUserByEmailParams) (*User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, arg.Email, arg.Aud)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.FullName,
		&i.Phone,
		&i.Country,
		&i.Email,
		&i.Password,
		&i.LastSign,
		&i.Role,
		&i.Aud,
	)
	return &i, err
}

const getUserByPhone = `-- name: GetUserByPhone :one
SELECT id, created_at, updated_at, deleted_at, full_name, phone, country, email, password, last_sign, role, aud FROM users
WHERE phone = $1 AND aud = $2
LIMIT 1
FOR NO KEY UPDATE
`

type GetUserByPhoneParams struct {
	Phone string `json:"phone"`
	Aud   string `json:"aud"`
}

func (q *Queries) GetUserByPhone(ctx context.Context, arg *GetUserByPhoneParams) (*User, error) {
	row := q.db.QueryRow(ctx, getUserByPhone, arg.Phone, arg.Aud)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.FullName,
		&i.Phone,
		&i.Country,
		&i.Email,
		&i.Password,
		&i.LastSign,
		&i.Role,
		&i.Aud,
	)
	return &i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, created_at, updated_at, deleted_at, full_name, phone, country, email, password, last_sign, role, aud FROM users
ORDER BY id
LIMIT $1 
OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg *ListUsersParams) ([]*User, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.FullName,
			&i.Phone,
			&i.Country,
			&i.Email,
			&i.Password,
			&i.LastSign,
			&i.Role,
			&i.Aud,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET 
    updated_at = now(),
    full_name = COALESCE($1, full_name),
    email = COALESCE($2, email),
    password = COALESCE($3, password)
WHERE 
    id = $4
RETURNING id, created_at, updated_at, deleted_at, full_name, phone, country, email, password, last_sign, role, aud
`

type UpdateUserParams struct {
	FullName *string `json:"fullName"`
	Email    *string `json:"email"`
	Password *string `json:"password"`
	ID       string  `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg *UpdateUserParams) (*User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.FullName,
		arg.Email,
		arg.Password,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.FullName,
		&i.Phone,
		&i.Country,
		&i.Email,
		&i.Password,
		&i.LastSign,
		&i.Role,
		&i.Aud,
	)
	return &i, err
}
